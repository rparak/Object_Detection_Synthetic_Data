# System (Default)
import sys
#   Add access if it is not in the system path.
if '../' + 'src' not in sys.path:
    sys.path.append('../..')
# OS (Operating system interfaces)
import os
# OpenCV (Computer Vision) [pip3 install opencv-python]
import cv2
# Custom Library:
#   ../Lib/Utilities/Image_Processing
import Lib.Utilities.Image_Processing
#   ../Lib/Utilities/File_IO
import Lib.Utilities.File_IO as File_IO

"""
Description:
    Initialization of constants.
"""
# The ID of the object to be processed.
CONST_OBJECT_ID = 0
# Available objects.
#   ID{0} = 'T_Joint'
#   ID{1} = 'Metal_Blank'
CONST_OBJECT_NAME = ['T_Joint', 'Metal_Blank']
# The color of the bounding box of the object.
CONST_OBJECT_BB_COLOR = [(255, 165, 0), (0, 165, 255)]
# Initial iteration of the scanning process.
CONST_SCAN_ITERATION = 1

def main():
    """
    Description:
        A program to evaluate camera data (image with corresponding label) generated from PhoXi Control. Image annotation was performed 
        using the graphical image annotation tool LabelImg.

        Reference:
            https://github.com/heartexlabs/labelImg?ref=blog.roboflow.com
    """

    # Locate the path to the project folder.
    project_folder = os.getcwd().split('Blender_Synthetic_Data')[0] + 'Blender_Synthetic_Data'

    # Load a raw image from a file.
    image_data = cv2.imread(f'{project_folder}/Data/Camera/processed/images/Object_ID_{CONST_OBJECT_ID}_{CONST_SCAN_ITERATION:05}.png')
    # Load a label (annotation) from a file.
    label_data = File_IO.Load(f'{project_folder}/Data/Camera/processed/labels/Object_ID_{CONST_OBJECT_ID}_{CONST_SCAN_ITERATION:05}', 'txt', ' ')

    for i, label_data_i in enumerate(label_data):
        # Create a bounding box from the label data.
        Bounding_Box_Properties = {'Name': f'{CONST_OBJECT_NAME[int(label_data_i[0])]}_{i}', 'Accuracy': '99.99', 
                                   'Data': {'x_c': label_data_i[1], 'y_c': label_data_i[2], 'width': label_data_i[3], 'height': label_data_i[4]}}

        # Draw the bounding box of the object with additional dependencies (name, precision, etc.) in 
        # the raw image.
        image_data = Lib.Utilities.Image_Processing.Draw_Bounding_Box(image_data, Bounding_Box_Properties, 'YOLO', CONST_OBJECT_BB_COLOR[CONST_OBJECT_ID], 
                                                                      True, True)

    # Displays the image in the window.
    cv2.imshow('Synthetic Data Generated by Blender', image_data)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == '__main__':
    sys.exit(main())