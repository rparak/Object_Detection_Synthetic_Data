# System (Default)
import sys
#   Add access if it is not in the system path.
if '../' + 'src' not in sys.path:
    sys.path.append('../..')
# Numpy (Array computing) [pip3 install numpy]
import numpy as np
# OS (Operating system interfaces)
import os
# SciencePlots (Matplotlib styles for scientific plotting) [pip3 install SciencePlots]
import scienceplots
# Matplotlib (Visualization) [pip3 install matplotlib]
import matplotlib.pyplot as plt
# OpenCV (Computer Vision) [pip3 install opencv-python]
import cv2

"""
Description:
    Initialization of constants.
"""
# The ID of the object to be processed.
CONST_OBJECT_ID = 0
# Initial iteration of the scanning process.
CONST_SCAN_ITERATION = 1
# Displays an image using the matplotlib library 
# with histograms.
CONST_SHOW_IMG_MATPLOTLIB = True

def main():
    """
    Description:
        A program to display data from the camera (raw/processed images) as well as to compare the data with 
        the corresponding histogram. In our case it is the camera from the PhoXi 3D Scanner M.

        Note:
            The processed data are generated by the script:
                ../Lib/Camera/image_processing.py
    """

    # Locate the path to the project folder.
    project_folder = os.getcwd().split('Blender_Synthetic_Data')[0] + 'Blender_Synthetic_Data'

    # The specified path of the file.
    file_path = f'{project_folder}/Data'    

    # Loads images from the specified file.
    #   Note:
    #       Related raw/processed images.
    image_name = f'Object_ID_{CONST_OBJECT_ID}_{CONST_SCAN_ITERATION:05}'
    image_raw = cv2.imread(f'{file_path}/Camera/raw/images/{image_name}.png')
    image_processed = cv2.imread(f'{file_path}/Camera/processed/images/{image_name}.png')

    # Set the parameters for the scientific style.
    plt.style.use('science')
    
    # Matplotlib Method:
    if CONST_SHOW_IMG_MATPLOTLIB == True:
        # Create a figure with 4 subplots.
        fig, ax = plt.subplots(2, 2)
        fig.suptitle(f'The name of the processed image: ../{image_name}.png', fontsize = 20)

        # Calculate the grayscale histogram of the raw image and the processed image.
        raw_image_hist = cv2.calcHist([image_raw], [0], None, [256], [0, 256])
        processed_image_hist = cv2.calcHist([image_processed], [0], None, [256], [0, 256])

        # Display data as an image.
        ax[0, 0].imshow(image_raw)
        ax[0, 1].imshow(image_processed)

        # Display histogram data of a single image.
        ax[1, 0].plot(raw_image_hist, '-', linewidth=1.0, color=[0.525,0.635,0.8,1.0], label='Raw Image')
        ax[1, 1].plot(processed_image_hist, '-', linewidth=1.0, color=[0.525,0.635,0.8,1.0], label='Processed Image')

        # Calculate the maximum raw image (histogram) number to resize 
        # the y-axis of the histogram.
        hist_max_value = np.max(np.array(raw_image_hist))
        for i in range(2):
            # Set parameters of the visualization.
            #   1\ Image
            ax[0, i].set_title(f'Grayscale Image')
            #   Label
            ax[0, i].set_xlabel(r'Width in pixels'); ax[0, i].set_ylabel(r'Height in pixels')  
            #   2\ Histogram
            ax[1, i].set_title(f'Histogram of Grayscale Image')
            #   Y-Limit
            ax[1, i].set_ylim([-10000, hist_max_value + 10000])
            #   Label
            ax[1, i].set_xlabel(r'Intesity'); ax[1, i].set_ylabel(r'Frequency')
            #   Other dependencies
            ax[1, i].grid(linewidth = 0.25, linestyle = '--')
            ax[1, i].legend(fontsize=10.0)

        # Display the results.
        plt.show()
    else:
        # OpenCV Method:
        #   Displays images in the window.
        cv2.imshow('Raw camera data scanned with the PhoXi 3D Scanner M', image_raw)
        cv2.imshow('Output data processed from raw camera data', image_processed)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

if __name__ == '__main__':
    sys.exit(main())