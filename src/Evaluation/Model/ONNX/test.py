# System (Default)
import sys
#   Add access if it is not in the system path.
if '../' + 'src' not in sys.path:
    sys.path.append('../../..')
# OS (Operating system interfaces)
import os
# Numpy (Array computing) [pip3 install numpy]
import numpy as np
# Time (Time access and conversions)
import time
# OpenCV (Computer Vision) [pip3 install opencv-python]
import cv2
# Custom Library:
#   ../Lib/Utilities/Image_Processing
import Lib.Utilities.Image_Processing

"""
Description:
    Initialization of constants.
"""
# The ID of the object to be tested.
#   ID{0} = 'T_Joint'
#   ID{1} = 'Metal_Blank'
CONST_OBJECT_ID = 1
# Available objects.
#   ID{0} = 'T_Joint'
#   ID{1} = 'Metal_Blank'
CONST_OBJECT_NAME = ['T_Joint', 'Metal_Blank']
# The color of the bounding box of the object.
CONST_OBJECT_BB_COLOR = [(255, 165, 0), (0, 165, 255)]
# The identification number of the dataset type.
CONST_DATASET_TYPE = 0
# Name of the dataset.
CONST_DATASET_NAME = f'Dataset_Type_{CONST_DATASET_TYPE}'
# Number of data to be tested.
CONST_NUM_OF_TEST_DATA = 1
# Initial iteration of the scanning process.
CONST_SCAN_ITERATION = 44
# The type of image folder to be processed.
#   'DATASET': Images for the dataset.
#   'ADDITIONAL': Images for additional tests.
CONST_IMAGE_FOLDER_TYPE = 'DATASET'

def main():
    """
    Description:
        ...
    """
        
    # Locate the path to the project folder.
    project_folder = os.getcwd().split('Blender_Synthetic_Data')[0] + 'Blender_Synthetic_Data'

    # Load a pre-trained YOLO model in the *.onnx format.
    model = cv2.dnn.readNet(f'{project_folder}/YOLO/Model/Type_{CONST_DATASET_TYPE}/yolov8n_custom.onnx')

    for n_i in range(CONST_NUM_OF_TEST_DATA):
        image_data = cv2.imread(f'{project_folder}/Data/{CONST_DATASET_NAME}/images/test/Object_ID_{CONST_OBJECT_ID}_{(CONST_SCAN_ITERATION + (n_i + 1)):05}.png')

        # Start the timer.
        t_0 = time.time()
        
        # Object detection using the trained YOLO model.
        (class_id, bounding_box, confidence) = Lib.Utilities.Image_Processing.YOLO_ONNX_Format_Object_Detection(image_data, model, [640, 480], 0.5)

        # Display information.
        print(f'[INFO]  - Image: Image_{(CONST_SCAN_ITERATION + (n_i + 1)):05}.png')
        print(f'[INFO] Time: {(time.time() - t_0):0.05f} in seconds.')
        

        if class_id != None:
            for i, (class_id_i, bounding_box_i, confidence_i) in enumerate(zip(class_id, bounding_box, confidence)):
                # Create a bounding box from the label data.
                Bounding_Box_Properties = {'Name': f'{CONST_OBJECT_NAME[class_id_i]}_{i}', 'Precision': f'{str(np.round(confidence_i, 2))}', 
                                            'Data': bounding_box_i}
                
                # Draw the bounding box of the object with additional dependencies (name, precision, etc.) in 
                # the raw image.
                image_data = Lib.Utilities.Image_Processing.Draw_Bounding_Box(image_data, Bounding_Box_Properties, 'PASCAL_VOC', CONST_OBJECT_BB_COLOR[class_id_i], 
                                                                                True, True)

        # Displays the image in the window.
        cv2.imshow('Synthetic Data Generated by Blender', image_data)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

if __name__ == '__main__':
    sys.exit(main())