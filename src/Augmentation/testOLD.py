# System (Default)
import sys
#   Add access if it is not in the system path.
if '../' + 'src' not in sys.path:
    sys.path.append('..')
# OS (Operating system interfaces)
import os
# OpenCV (Computer Vision) [pip3 install opencv-python]
import cv2
# Numpy (Array computing) [pip3 install numpy]
import numpy as np
# Custom Library:
#   ../Lib/Utilities/File_IO
import Lib.Utilities.File_IO as File_IO

import albumentations as A

# ...
import torch
import torchvision
from PIL import Image

# https://pytorch.org/vision/0.11/auto_examples/plot_transforms.html
# https://pseudo-lab.github.io/Tutorial-Book-en/chapters/en/object-detection/Ch3-preprocessing.html
# https://github.com/aladdinpersson/Machine-Learning-Collection/blob/master/ML/Pytorch/Basics/pytorch_transforms.py

img = cv2.imread('/Users/rparak/Documents/GitHub/Blender_Synthetic_Data/images/Image_00001.png')
label_data = File_IO.Load('/Users/rparak/Documents/GitHub/Blender_Synthetic_Data/images/Image_00001', 'txt', ' ')[0]

only_totensor = torchvision.transforms.Compose([torchvision.transforms.ToTensor()])

#img = Image.open('/Users/rparak/Documents/GitHub/Blender_Synthetic_Data/images/Image_00001.png')

# You may need to convert the color.
img_raw = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img = Image.fromarray(img_raw)

# Load Data
tsf = torchvision.transforms.Compose([torchvision.transforms.ColorJitter(brightness=(0.5, 1.5), contrast=(0.5, 1.5), saturation=(0.1, 0.5)),
                                      torchvision.transforms.GaussianBlur(kernel_size=(5, 5), sigma=(0.01, 1.0)),
                                      torchvision.transforms.RandomAffine(degrees = 0, translate = (0.025, 0.025)),
                                      torchvision.transforms.RandomResizedCrop(size = (1544, 2064), scale = (0.98, 1.0)),
                                      torchvision.transforms.ToTensor()])

img_1 = only_totensor(img)
img_2 = tsf(img)

img_1 = img_1.permute(1,2,0)
img_2 = img_2.permute(1,2,0) 

img_n = cv2.cvtColor(np.array(img_2), cv2.COLOR_RGB2BGR)

print(torchvision.transforms.functional.to_tensor(label_data))
#print(torch.as_tensor(label_data, dtype=torch.float32))
#print(tsf(label_data))


#cv2.imwrite('/Users/rparak/Documents/GitHub/Blender_Synthetic_Data/images/Image_00002.png', 255*img_n)
# Displays the image in the window.
#cv2.imshow('Synthetic Data Generated by Blender', img_n)
#cv2.waitKey(0)
#cv2.destroyAllWindows()


